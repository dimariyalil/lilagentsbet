"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CEO –∞–≥–µ–Ω—Ç
"""
import logging
from datetime import datetime
from typing import Optional

from anthropic import AsyncAnthropic
from utils.config import settings

logger = logging.getLogger(__name__)


class LilKenCEO:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CEO Agent"""
    
    def __init__(self):
        self.name = "lil_ken_ceo"
        self.anthropic = AsyncAnthropic(api_key=settings.ANTHROPIC_API_KEY)
        self.memory = {}  # –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.initialized = True
        logger.info(f"‚úÖ {self.name} agent initialized")
        return True
    
    async def process_message(self, message: str, user_id: int) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Claude
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{
                    "role": "user",
                    "content": f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π CEO –∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.
                    
–í–æ–ø—Ä–æ—Å: {message}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —Ü–µ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å."""
                }]
            )
            
            answer = response.content[0].text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Å—Ç—É—é –ø–∞–º—è—Ç—å
            if user_id not in self.memory:
                self.memory[user_id] = []
            self.memory[user_id].append({
                "message": message,
                "response": answer,
                "timestamp": datetime.now().isoformat()
            })
            
            return answer
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
    async def generate_year_strategy(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–¥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        prompt = """–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –≥–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞:
- –ö–ª—é—á–µ–≤—ã–µ —Ü–µ–ª–∏ –Ω–∞ –≥–æ–¥
- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏"""
        
        try:
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def analyze_market(self, country: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {country}:
- –†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞
- –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Ö–æ–¥–∞
- –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã"""
        
        try:
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def competitor_analysis(self) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        prompt = """–°–æ–∑–¥–∞–π —à–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:
- –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
- –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
- –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö –∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
- –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        try:
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def swot_analysis(self) -> str:
        """SWOT –∞–Ω–∞–ª–∏–∑"""
        prompt = """–°–æ–∑–¥–∞–π —à–∞–±–ª–æ–Ω SWOT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞:
- Strengths (–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)
- Weaknesses (–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã)  
- Opportunities (–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
- Threats (–£–≥—Ä–æ–∑—ã)"""
        
        try:
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def risk_assessment(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"""
        prompt = """–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–æ–≤:
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∏—Å–∫–∏
- –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏
- –†—ã–Ω–æ—á–Ω—ã–µ —Ä–∏—Å–∫–∏
- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏
- –ú–µ—Ç–æ–¥—ã —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤"""
        
        try:
            response = await self.anthropic.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=1000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def daily_report(self) -> str:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        return f"""üìã **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç CEO**

üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}

üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
‚Ä¢ –í—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π  
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏

üìä **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:**
‚Ä¢ –í—ã—Ä—É—á–∫—É –∏ —Ä–∞—Å—Ö–æ–¥—ã
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ 3 –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ 1:1 —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
    
    async def weekly_report(self) -> str:
        """–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        return f"""üìÖ **–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç CEO**

üóì **–ù–µ–¥–µ–ª—è:** {datetime.now().strftime('%d.%m.%Y')}

üéØ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏:**
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã

üìà **–ú–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã

üîÆ **–ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
‚Ä¢ –í–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""