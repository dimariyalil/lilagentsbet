"""
–û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç –¥–ª—è lil_ken_ceo
"""
import asyncio
from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

from agents.lil_ken_ceo.agent import LilKenCEO
from utils.config import settings
from utils.logger import setup_logger

logger = setup_logger("bot")


class CEOBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.app = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        self.ceo_agent = LilKenCEO()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        self.app.add_handler(CommandHandler("yearstrategy", self.cmd_year_strategy))
        self.app.add_handler(CommandHandler("marketanalysis", self.cmd_market_analysis))
        self.app.add_handler(CommandHandler("competitorwatch", self.cmd_competitor_watch))
        self.app.add_handler(CommandHandler("swotanalysis", self.cmd_swot_analysis))
        self.app.add_handler(CommandHandler("riskassessment", self.cmd_risk_assessment))
        self.app.add_handler(CommandHandler("dailyreport", self.cmd_daily_report))
        self.app.add_handler(CommandHandler("weeklyreport", self.cmd_weekly_report))
        self.app.add_handler(CommandHandler("status", self.cmd_status))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
üéØ –ü—Ä–∏–≤–µ—Ç! –Ø lil_ken_ceo - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π CEO.

–Ø –ø–æ–º–æ–≥—É —Å:
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–æ–≤ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–æ–π —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
"""
        await update.message.reply_text(welcome_text)
        logger.info(f"User {update.effective_user.id} started bot")
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
/yearstrategy - –ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
/swotanalysis - SWOT –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏
/riskassessment - –û—Ü–µ–Ω–∫–∞ –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–æ–≤

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
/marketanalysis [—Å—Ç—Ä–∞–Ω–∞] - –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
/competitorwatch - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

üìà –û—Ç—á–µ—Ç—ã:
/dailyreport - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
/weeklyreport - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

üîß –°–∏—Å—Ç–µ–º–∞:
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!
"""
        await update.message.reply_text(help_text)
    
    async def cmd_year_strategy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /yearstrategy"""
        await update.message.reply_text("üîÑ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
        
        response = await self.ceo_agent.generate_year_strategy()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_market_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /marketanalysis"""
        if not context.args:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n/marketanalysis –ë—Ä–∞–∑–∏–ª–∏—è"
            )
            return
        
        country = " ".join(context.args)
        await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ {country}...")
        
        response = await self.ceo_agent.analyze_market(country)
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_competitor_watch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /competitorwatch"""
        await update.message.reply_text("üëÄ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö...")
        
        response = await self.ceo_agent.competitor_analysis()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_swot_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /swotanalysis"""
        await update.message.reply_text("üìä –ü—Ä–æ–≤–æ–∂—É SWOT –∞–Ω–∞–ª–∏–∑...")
        
        response = await self.ceo_agent.swot_analysis()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_risk_assessment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /riskassessment"""
        await update.message.reply_text("‚ö†Ô∏è –û—Ü–µ–Ω–∏–≤–∞—é —Ä–∏—Å–∫–∏...")
        
        response = await self.ceo_agent.assess_risks()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_daily_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /dailyreport"""
        await update.message.reply_text("üìä –ì–æ—Ç–æ–≤–ª—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        response = await self.ceo_agent.generate_daily_report()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_weekly_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /weeklyreport"""
        await update.message.reply_text("üìà –ì–æ—Ç–æ–≤–ª—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        response = await self.ceo_agent.generate_weekly_report()
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status = await self.ceo_agent.get_status()
        await update.message.reply_text(status, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"Message from {user_id}: {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await update.message.chat.send_action("typing")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        response = await self.ceo_agent.process_message(user_message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("yearstrategy", "–ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"),
            BotCommand("marketanalysis", "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"),
            BotCommand("competitorwatch", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"),
            BotCommand("swotanalysis", "SWOT –∞–Ω–∞–ª–∏–∑"),
            BotCommand("riskassessment", "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"),
            BotCommand("dailyreport", "–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"),
            BotCommand("weeklyreport", "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
        ]
        await self.app.bot.set_my_commands(commands)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await self.setup_bot_commands()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        await self.ceo_agent.initialize()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å username –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info(f"ü§ñ Bot @{settings.TELEGRAM_BOT_USERNAME} started successfully!")
        logger.info(f"üìä Agent: {settings.AGENT_NAME}")
        logger.info(f"üåç Language: {settings.AGENT_LANGUAGE}")
        logger.info(f"üìù Log level: {settings.LOG_LEVEL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.app.run_polling(allowed_updates=Update.ALL_TYPES)