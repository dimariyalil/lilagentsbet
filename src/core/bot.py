"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç
"""
import logging
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)

from agents.lil_ken_ceo.agent import LilKenCEO
from utils.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class CEOBot:
    """–ö–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.app = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        self.ceo_agent = LilKenCEO()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.cmd_start))
        self.app.add_handler(CommandHandler("help", self.cmd_help))
        self.app.add_handler(CommandHandler("menu", self.cmd_menu))
        self.app.add_handler(CommandHandler("yearstrategy", self.cmd_year_strategy))
        self.app.add_handler(CommandHandler("marketanalysis", self.cmd_market_analysis))
        self.app.add_handler(CommandHandler("competitorwatch", self.cmd_competitor_watch))
        self.app.add_handler(CommandHandler("swotanalysis", self.cmd_swot_analysis))
        self.app.add_handler(CommandHandler("riskassessment", self.cmd_risk_assessment))
        self.app.add_handler(CommandHandler("dailyreport", self.cmd_daily_report))
        self.app.add_handler(CommandHandler("weeklyreport", self.cmd_weekly_report))
        self.app.add_handler(CommandHandler("status", self.cmd_status))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π!)
        self.app.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        welcome_text = f"""
üéØ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø lil_ken_ceo - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π CEO.

–Ø –ø–æ–º–æ–≥—É —Å:
‚Ä¢ üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º  
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–æ–≤ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
‚Ä¢ ‚ö†Ô∏è –û—Ü–µ–Ω–∫–æ–π —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚Ä¢ üí° –ü—Ä–∏–Ω—è—Ç–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π /help –∏–ª–∏ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥", callback_data="menu"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ],
            [
                InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="market"),
                InlineKeyboardButton("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="strategy")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"User {user.id} ({user.username}) started the bot")
    
    async def cmd_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="yearstrategy"),
                InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="marketanalysis")
            ],
            [
                InlineKeyboardButton("üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", callback_data="competitorwatch"),
                InlineKeyboardButton("‚öñÔ∏è SWOT –∞–Ω–∞–ª–∏–∑", callback_data="swotanalysis")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤", callback_data="riskassessment"),
                InlineKeyboardButton("üìã –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="dailyreport")
            ],
            [
                InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="weeklyreport"),
                InlineKeyboardButton("‚öôÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="status")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = """
üéØ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é lil_ken_ceo**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:

üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
‚Ä¢ –ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

‚öñÔ∏è **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ SWOT –∞–Ω–∞–ª–∏–∑
‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
‚Ä¢ –û—Ç—á–µ—Ç—ã

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å! üí¨
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        if update.callback_query:
            await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data == "menu":
            # –î–ª—è –º–µ–Ω—é —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update —Å message
            fake_update = Update(
                update_id=update.update_id,
                message=query.message,
                callback_query=query
            )
            await self.cmd_menu(fake_update, context)
        elif callback_data == "help":
            await self.cmd_help(update, context)
        elif callback_data == "market" or callback_data == "marketanalysis":
            await self.cmd_market_analysis(update, context)
        elif callback_data == "strategy" or callback_data == "yearstrategy":
            await self.cmd_year_strategy(update, context)
        elif callback_data == "competitorwatch":
            await self.cmd_competitor_watch(update, context)
        elif callback_data == "swotanalysis":
            await self.cmd_swot_analysis(update, context)
        elif callback_data == "riskassessment":
            await self.cmd_risk_assessment(update, context)
        elif callback_data == "dailyreport":
            await self.cmd_daily_report(update, context)
        elif callback_data == "weeklyreport":
            await self.cmd_weekly_report(update, context)
        elif callback_data == "status":
            await self.cmd_status(update, context)
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üéØ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:**
/yearstrategy - –ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è
/swotanalysis - SWOT –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏  
/riskassessment - –û—Ü–µ–Ω–∫–∞ –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–æ–≤

üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
/marketanalysis - –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
/competitorwatch - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

üìà **–û—Ç—á–µ—Ç—ã:**
/dailyreport - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
/weeklyreport - –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç

‚öôÔ∏è **–î—Ä—É–≥–æ–µ:**
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí¨ **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!**
–Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π CEO.
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        if update.callback_query:
            await update.callback_query.edit_message_text(help_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def _send_message(self, update: Update, text: str, parse_mode: str = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å callback –∏ –æ–±—ã—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)"""
        if update.callback_query:
            await update.callback_query.message.reply_text(text, parse_mode=parse_mode)
        else:
            await update.message.reply_text(text, parse_mode=parse_mode)
    
    async def cmd_year_strategy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /yearstrategy"""
        await self._send_message(update, "üîÑ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
        
        response = await self.ceo_agent.generate_year_strategy()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_market_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /marketanalysis"""
        # –î–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω—É
        if update.callback_query:
            country = "–†–æ—Å—Å–∏—è"
        else:
            if not context.args:
                await self._send_message(update, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n/marketanalysis –ë—Ä–∞–∑–∏–ª–∏—è")
                return
            country = " ".join(context.args)
        
        await self._send_message(update, f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ {country}...")
        
        response = await self.ceo_agent.analyze_market(country)
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_competitor_watch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /competitorwatch"""
        await self._send_message(update, "üëÄ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö...")
        
        response = await self.ceo_agent.competitor_analysis()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_swot_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /swotanalysis"""
        await self._send_message(update, "üìä –ü—Ä–æ–≤–æ–∂—É SWOT –∞–Ω–∞–ª–∏–∑...")
        
        response = await self.ceo_agent.swot_analysis()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_risk_assessment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /riskassessment"""
        await self._send_message(update, "‚ö†Ô∏è –û—Ü–µ–Ω–∏–≤–∞—é –±–∏–∑–Ω–µ—Å-—Ä–∏—Å–∫–∏...")
        
        response = await self.ceo_agent.risk_assessment()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_daily_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /dailyreport"""
        await self._send_message(update, "üìã –§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        response = await self.ceo_agent.daily_report()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_weekly_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /weeklyreport"""
        await self._send_message(update, "üìÖ –§–æ—Ä–º–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        response = await self.ceo_agent.weekly_report()
        await self._send_message(update, response, parse_mode='Markdown')
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status_text = f"""
‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã lil_ken_ceo**

ü§ñ **–ë–æ—Ç:** –ê–∫—Ç–∏–≤–µ–Ω
üéØ **–ê–≥–µ–Ω—Ç:** {settings.AGENT_NAME}
üåç **–Ø–∑—ã–∫:** {settings.AGENT_LANGUAGE}
üìù **–õ–æ–≥–∏:** {settings.LOG_LEVEL}

üîë **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ Telegram Bot: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ Anthropic API: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí° **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
"""
        await self._send_message(update, status_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"Message from {user_id}: {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await update.message.chat.send_action("typing")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        response = await self.ceo_agent.process_message(user_message, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("yearstrategy", "–ì–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"),
            BotCommand("marketanalysis", "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"),
            BotCommand("competitorwatch", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"),
            BotCommand("swotanalysis", "SWOT –∞–Ω–∞–ª–∏–∑"),
            BotCommand("riskassessment", "–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"),
            BotCommand("dailyreport", "–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"),
            BotCommand("weeklyreport", "–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
        ]
        await self.app.bot.set_my_commands(commands)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await self.setup_bot_commands()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        await self.ceo_agent.initialize()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å username –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info(f"ü§ñ Bot @{settings.TELEGRAM_BOT_USERNAME} started successfully!")
        logger.info(f"üìä Agent: {settings.AGENT_NAME}")
        logger.info(f"üåç Language: {settings.AGENT_LANGUAGE}")
        logger.info(f"üìù Log level: {settings.LOG_LEVEL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.app.run_polling(allowed_updates=Update.ALL_TYPES)