#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from utils.config import settings


def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = {
        "TELEGRAM_BOT_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞",
        "ANTHROPIC_API_KEY": "API –∫–ª—é—á Claude/Anthropic",
    }
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = {
        "TELEGRAM_ADMIN_ID": "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞",
        "OPENAI_API_KEY": "API –∫–ª—é—á OpenAI",
        "REDIS_URL": "URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis",
        "POSTGRES_URL": "URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL",
        "CHROMADB_HOST": "–•–æ—Å—Ç ChromaDB",
        "CHROMADB_PORT": "–ü–æ—Ä—Ç ChromaDB",
        "N8N_WEBHOOK_URL": "URL webhook n8n",
        "N8N_API_KEY": "API –∫–ª—é—á n8n",
        "SECRET_KEY": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    }
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    print("üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var_name, description in required_vars.items():
        value = os.getenv(var_name)
        if value and value.strip():
            print(f"  ‚úÖ {var_name}: {description} - –ù–ê–ô–î–ï–ù–ê")
        else:
            print(f"  ‚ùå {var_name}: {description} - –ù–ï –ù–ê–ô–î–ï–ù–ê")
            all_good = False
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    print("üìù –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var_name, description in optional_vars.items():
        value = os.getenv(var_name)
        if value and value.strip():
            print(f"  ‚úÖ {var_name}: {description} - –ù–ê–ô–î–ï–ù–ê")
        else:
            print(f"  ‚ö†Ô∏è  {var_name}: {description} - –ù–ï –ù–ê–ô–î–ï–ù–ê (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
    print("‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  ü§ñ Bot Username: @{settings.TELEGRAM_BOT_USERNAME}")
    print(f"  üéØ Agent Name: {settings.AGENT_NAME}")
    print(f"  üåç Language: {settings.AGENT_LANGUAGE}")
    print(f"  üìù Log Level: {settings.LOG_LEVEL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not settings.TELEGRAM_BOT_TOKEN:
        print("  ‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings")
        all_good = False
    
    if not settings.ANTHROPIC_API_KEY:
        print("  ‚ùå ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings")
        all_good = False
    
    print()
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if all_good:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ lil_ken_ceo –±–æ—Ç–∞")
    print("=" * 60)
    print()
    
    success = check_environment_variables()
    
    print()
    print("=" * 60)
    
    if success:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        sys.exit(0)
    else:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        sys.exit(1)


if __name__ == "__main__":
    main()